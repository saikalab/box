#!/system/bin/sh

# 检查是否已安装 busybox；如果未安装，则将必要路径添加到环境变量 PATH
if ! command -v busybox &> /dev/null; then
  export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/system/bin"
fi

# -----------------------------------------------------------------
# 路径与变量 (请勿修改)
# -----------------------------------------------------------------

# box 目录相关变量
box_dir="/data/adb/box"
box_run="${box_dir}/run"
box_log="${box_run}/runs.log"
box_pid="${box_run}/box.pid"
bin_dir="${box_dir}/bin"
system_packages_file="/data/system/packages.list"
uid_list="/data/adb/box/run/appuid.list"


# -----------------------------------------------------------------
# 通用设置
# -----------------------------------------------------------------

# 是否开机自启
boot_auto_start="true"

# 获取当前时间（24小时制）
current_time=$(date +"%H:%M")


# -----------------------------------------------------------------
# 核心设置
# -----------------------------------------------------------------

# 可用内核列表
bin_list=("mihomo" "sing-box" "xray" "v2fly" "hysteria")

# 选择要使用的客户端：mihomo / sing-box / xray / v2fly / hysteria
bin_name="mihomo"

# 是否在启动时自动修改核心配置文件 (prepare_mihomo/prepare_singbox)
auto_modify_config="true"

# 设置 bin_path 变量
bin_path="${bin_dir}/${bin_name}"

# 如果不想生成 /run/${bin_name}.log 文件（因为会随时间变大），可将 "${box_run}/${bin_name}.log" 替换为 "/dev/null"
bin_log="${box_run}/${bin_name}.log"
# bin_log="/dev/null"

# 设置 BFM 核心文件的用户和用户组，如果 setgiduid 未知，设置为 0:3005
box_user_group="root:net_admin"


# -----------------------------------------------------------------
# 网络设置
# -----------------------------------------------------------------

# 网络模式说明：
# redirect: handles tcp + udp[direct]
# tproxy: handles tcp + udp
# mixed: redirect[tcp] + tun[udp]
# enhance: redirect[tcp] + tproxy[udp]
# tun: handles tcp + udp (auto-route)
network_mode="tproxy"

# 设置 tproxy 和 redir 功能的端口号
tproxy_port="9898"
redir_port="9797"

# 是否启用 IPv6 支持：true / false
ipv6="true"


# -----------------------------------------------------------------
# 性能调优
# -----------------------------------------------------------------

# cgroup 内存限制配置
cgroup_memcg="false"
memcg_limit="100M"

# cgroup cpuset 配置
cgroup_cpuset="false"
# 为空时自动填充
allow_cpu="0-7"

# cgroup blkio 配置
cgroup_blkio="false"
# 为空时默认 900
weight=""

# -----------------------------------------------------------------
# 订阅与更新
# -----------------------------------------------------------------

# 执行 "su -c /data/adb/box/scripts/box.tool geox" 可手动更新 geox
update_geo="false"

# 如果 "renew=true" 则只更新 config.yaml 而非订阅配置。执行 "su -c /data/adb/box/scripts/box.tool subs" 可手动更新订阅
renew=false
update_subscription="false"

# Mihomo 订阅链接
subscription_url_mihomo=''

# 更新订阅与 geox。通过 cron 设置更新时间间隔，更多信息见：https://crontab.guru/，设置为 'true' 启用定时任务
interva_update="0 0,6,12,18 * * *" # 每天 00、06、12、18 点更新
run_crontab="false"


# -----------------------------------------------------------------
# Mihomo 设置
# -----------------------------------------------------------------

# mihomo 配置文件
name_mihomo_config="config.yaml"
mihomo_config="${box_dir}/mihomo/${name_mihomo_config}"

# mihomo 订阅配置
name_provide_mihomo_config="proxy1.yaml"
mihomo_provide_config="${box_dir}/mihomo/proxy_provide/${name_provide_mihomo_config}"

# 是否支持订阅中指定的规则。当订阅包含自定义规则时很有用
custom_rules_subs="false"
name_provide_mihomo_rules="rules.yaml"
mihomo_provide_rules="${box_dir}/mihomo/provide/${name_provide_mihomo_rules}"

# 是否支持订阅中指定的代理组
custom_proxy_groups_subs="false"
name_provide_mihomo_proxy_groups="proxy-groups.yaml"
mihomo_provide_proxy_groups="${box_dir}/mihomo/provide/${name_provide_mihomo_proxy_groups}"


# -----------------------------------------------------------------
# Sing-box 设置
# -----------------------------------------------------------------

# Sing-box 配置文件
name_sing_config="config.json"
sing_config="${box_dir}/sing-box/${name_sing_config}"


# -----------------------------------------------------------------
# 应用代理
# -----------------------------------------------------------------

write_listap="${box_dir}/ap.list.cfg"
# 检查 ap.list.cfg 配置文件，如果不存在则创建
[ ! -f "${write_listap}" ] && touch "${write_listap}"

# 从 ap.list.cfg 配置文件读取允许的网络接口列表
ap_list=($(busybox awk '/^allow / {print $2}' "${write_listap}"))
# 从 ap.list.cfg 配置文件读取忽略的网络接口列表，这些接口将被排除（fake-ip 模式下无效）
ignore_out_list=($(busybox awk '/^ignore / {print $2}' "${write_listap}"))

# 定义 package.list.cfg 路径
pkg_config="${box_dir}/package.list.cfg"
# 检查 pkg 配置文件，如果不存在则创建
[ ! -f "${pkg_config}" ] && touch "${pkg_config}"

# 提取模式、包名列表和 gid 列表
proxy_mode=$(sed -n 's/^mode:\([^ ]*\).*/\1/p' ${pkg_config})

# --- 新的包名处理逻辑 ---
# 1. 提取已有用户ID前缀的包名 (例如: 10:com.package)
prefixed_list=($(sed -n '/^[0-9][0-9]*:/p' "${pkg_config}"))
# 2. 提取没有前缀的包名 (主空间应用), 排除纯数字的 GID 和注释, 然后统一添加 "0:" 前缀
unprefixed_list_converted=($(sed -n '/\./p' "${pkg_config}" | grep -v -E '^[0-9]+:|^[0-9]+$|^[[:space:]]*#' | sed 's/^/0:/'))
# 3. 合并成一个统一的列表
packages_list_multiuser=("${prefixed_list[@]}" "${unprefixed_list_converted[@]}")
# 4. 为了兼容旧脚本，让 packages_list 继承新列表的内容
packages_list=("${packages_list_multiuser[@]}")
# 5. GID 列表的提取保持不变
gid_list=($(sed -n '/^[0-9]\+$/p' "${pkg_config}"))


# -----------------------------------------------------------------
# 网络状态控制
# -----------------------------------------------------------------

# 是否根据网络状态控制模块服务？
# false "默认禁用" # true "启用"
enable_network_service_control=false
# 断开WiFi网络后是否启用模块服务
use_module_on_wifi_disconnect=true
# WiFi网络下是否启用模块服务
use_module_on_wifi=true
# 是否启用WiFi SSID匹配 # 需要匹配的WiFi SSID
use_ssid_matching=false
# WiFi SSID匹配 黑/白名单模式
use_wifi_list_mode="blacklist" # blacklist 黑名单 #whitelist 白名单
# 需要匹配的WiFi SSID列表（多个 SSID 用空格或逗号分隔）
wifi_ssids_list="WiFi1 WiFi2"


# -----------------------------------------------------------------
# 日志函数
# -----------------------------------------------------------------

# 日志函数
log() {
  normal="\033[0m"
  orange="\033[1;38;5;208m"
  red="\033[1;31m"
  green="\033[1;32m"
  yellow="\033[1;33m"
  blue="\033[1;34m"
  # 根据参数选择文本颜色
  case $1 in
    Info) color="${blue}" ;;
    Error) color="${red}" ;;
    Warning) color="${yellow}" ;;
    *) color="${green}" ;;
  esac
  # 添加时间和参数到消息
  message="${current_time} [$1]: $2"
  if [ -t 1 ]; then
    # 控制台输出消息
    echo -e "${color}${message}${normal}"
  else
    # 输出到日志文件
    echo "${message}" | tee -a "${box_log}"
  fi
  
  if [[ $TOAST ]]; then
      true # 原 notify 调用位置
  fi
}
